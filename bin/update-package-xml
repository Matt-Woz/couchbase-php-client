#!/usr/bin/env ruby

require "nokogiri"

project_root = File.expand_path(File.join(__dir__, ".."))
package_xml_path = File.join(project_root, "package.xml")
package_xml = Nokogiri::XML.parse(File.read(package_xml_path)) { |x| x.noblanks }

files = [
    "CMakeLists.txt",
    "LICENSE.txt",
    "Makefile.frag",
    "cmake/*",
    "config.m4",
    "Couchbase/**/*.php",
    "src/**/*.{cxx,hxx}",
    "deps/couchbase-cxx-client/CMakeLists.txt",
    "deps/couchbase-cxx-client/LICENSE.txt",
    "deps/couchbase-cxx-client/cmake/*",
    "deps/couchbase-cxx-client/couchbase/**/*",
    "deps/couchbase-cxx-client/third_party/asio/COPYING",
    "deps/couchbase-cxx-client/third_party/asio/LICENSE*",
    "deps/couchbase-cxx-client/third_party/asio/asio/include/*.hpp",
    "deps/couchbase-cxx-client/third_party/asio/asio/include/asio/**/*.[hi]pp",
    "deps/couchbase-cxx-client/third_party/cxx_function/cxx_function.hpp",
    "deps/couchbase-cxx-client/third_party/fmt/CMakeLists.txt",
    "deps/couchbase-cxx-client/third_party/fmt/ChangeLog.rst",
    "deps/couchbase-cxx-client/third_party/fmt/LICENSE.rst",
    "deps/couchbase-cxx-client/third_party/fmt/README.rst",
    "deps/couchbase-cxx-client/third_party/fmt/include/**/*",
    "deps/couchbase-cxx-client/third_party/fmt/src/**/*",
    "deps/couchbase-cxx-client/third_party/fmt/support/cmake/**/*",
    "deps/couchbase-cxx-client/third_party/gsl/CMakeLists.txt",
    "deps/couchbase-cxx-client/third_party/gsl/LICENSE*",
    "deps/couchbase-cxx-client/third_party/gsl/ThirdPartyNotices.txt",
    "deps/couchbase-cxx-client/third_party/gsl/cmake/*",
    "deps/couchbase-cxx-client/third_party/gsl/include/**/*",
    "deps/couchbase-cxx-client/third_party/hdr_histogram_c/CMakeLists.txt",
    "deps/couchbase-cxx-client/third_party/hdr_histogram_c/COPYING.txt",
    "deps/couchbase-cxx-client/third_party/hdr_histogram_c/LICENSE.txt",
    "deps/couchbase-cxx-client/third_party/hdr_histogram_c/config.cmake.in",
    "deps/couchbase-cxx-client/third_party/hdr_histogram_c/src/**/*",
    "deps/couchbase-cxx-client/third_party/http_parser/LICENSE*",
    "deps/couchbase-cxx-client/third_party/http_parser/http_parser.{c,h}",
    "deps/couchbase-cxx-client/third_party/json/CMakeLists.txt",
    "deps/couchbase-cxx-client/third_party/json/LICENSE*",
    "deps/couchbase-cxx-client/third_party/json/external/PEGTL/.cmake/*",
    "deps/couchbase-cxx-client/third_party/json/external/PEGTL/CMakeLists.txt",
    "deps/couchbase-cxx-client/third_party/json/external/PEGTL/LICENSE*",
    "deps/couchbase-cxx-client/third_party/json/external/PEGTL/include/**/*",
    "deps/couchbase-cxx-client/third_party/json/include/**/*",
    "deps/couchbase-cxx-client/third_party/jsonsl/*",
    "deps/couchbase-cxx-client/third_party/snappy/CMakeLists.txt",
    "deps/couchbase-cxx-client/third_party/snappy/COPYING",
    "deps/couchbase-cxx-client/third_party/snappy/cmake/*",
    "deps/couchbase-cxx-client/third_party/snappy/snappy-c.{h,cc}",
    "deps/couchbase-cxx-client/third_party/snappy/snappy-internal.h",
    "deps/couchbase-cxx-client/third_party/snappy/snappy-sinksource.{h,cc}",
    "deps/couchbase-cxx-client/third_party/snappy/snappy-stubs-internal.{h,cc}",
    "deps/couchbase-cxx-client/third_party/snappy/snappy-stubs-public.h.in",
    "deps/couchbase-cxx-client/third_party/snappy/snappy.{h,cc}",
    "deps/couchbase-cxx-client/third_party/spdlog/CMakeLists.txt",
    "deps/couchbase-cxx-client/third_party/spdlog/LICENSE",
    "deps/couchbase-cxx-client/third_party/spdlog/cmake/*",
    "deps/couchbase-cxx-client/third_party/spdlog/include/**/*",
    "deps/couchbase-cxx-client/third_party/spdlog/src/**/*",
].map do |glob|
  Dir.chdir(project_root) do
    Dir[glob].select { |path| File.file?(path) }
  end
end.flatten

tree = {directories: {}, files: []}
files.each do |file|
  parts = file.split("/")
  parents = parts[0..-2]
  filename = parts[-1]
  cursor = tree
  parents.each do |parent|
    cursor[:directories][parent] ||= {directories: {}, files: []}
    cursor = cursor[:directories][parent]
  end
  cursor[:files] << {name: filename, role: filename =~ /\.php$/ ? "php" : "src"}
end
tree[:files].each do |file|
  file[:role] = "doc" if file[:name] =~ /README|LICENSE/
end

def traverse(document, reader, writer)
  reader[:directories].each do |name, dir|
    node = document.create_element("dir")
    node["name"] = name
    writer.add_child(node)
    traverse(document, dir, node)
  end
  reader[:files].each do |file|
    node = document.create_element("file")
    node["role"] = file[:role]
    node["name"] = file[:name]
    writer.add_child(node)
  end
end

root = package_xml.create_element("dir")
root["name"] = "/"
traverse(package_xml, tree, root)

package_xml.at_css("package contents").children = root
File.write(package_xml_path, package_xml.to_xml(indent: 4))
